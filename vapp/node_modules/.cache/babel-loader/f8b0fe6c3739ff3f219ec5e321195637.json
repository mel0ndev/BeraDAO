{"remainingRequest":"/home/kevin/Code/solidity_projects/beraMarket/vapp/node_modules/babel-loader/lib/index.js!/home/kevin/Code/solidity_projects/beraMarket/vapp/node_modules/vuetify/lib/directives/scroll/index.js","dependencies":[{"path":"/home/kevin/Code/solidity_projects/beraMarket/vapp/node_modules/vuetify/lib/directives/scroll/index.js","mtime":1630154440790},{"path":"/home/kevin/Code/solidity_projects/beraMarket/vapp/node_modules/cache-loader/dist/cjs.js","mtime":1630154390989},{"path":"/home/kevin/Code/solidity_projects/beraMarket/vapp/node_modules/babel-loader/lib/index.js","mtime":1630154391115}],"contextDependencies":[],"result":["import _typeof from \"/home/kevin/Code/solidity_projects/beraMarket/vapp/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\n\nfunction inserted(el, binding) {\n  var _ref = binding.modifiers || {},\n      _ref$self = _ref.self,\n      self = _ref$self === void 0 ? false : _ref$self;\n\n  var value = binding.value;\n  var options = _typeof(value) === 'object' && value.options || {\n    passive: true\n  };\n  var handler = typeof value === 'function' || 'handleEvent' in value ? value : value.handler;\n  var target = self ? el : binding.arg ? document.querySelector(binding.arg) : window;\n  if (!target) return;\n  target.addEventListener('scroll', handler, options);\n  el._onScroll = {\n    handler: handler,\n    options: options,\n    // Don't reference self\n    target: self ? undefined : target\n  };\n}\n\nfunction unbind(el) {\n  if (!el._onScroll) return;\n  var _el$_onScroll = el._onScroll,\n      handler = _el$_onScroll.handler,\n      options = _el$_onScroll.options,\n      _el$_onScroll$target = _el$_onScroll.target,\n      target = _el$_onScroll$target === void 0 ? el : _el$_onScroll$target;\n  target.removeEventListener('scroll', handler, options);\n  delete el._onScroll;\n}\n\nexport var Scroll = {\n  inserted: inserted,\n  unbind: unbind\n};\nexport default Scroll;",{"version":3,"sources":["../../../src/directives/scroll/index.ts"],"names":[],"mappings":";;AAaA,SAAA,QAAA,CAAA,EAAA,EAAA,OAAA,EAAiE;AAC/D,aAAyB,OAAO,CAAP,SAAA,IAAzB,EAAA;AAAA,uBAAQ,IAAR;AAAA,MAAQ,IAAR,0BAAe,KAAf;;AACA,MAAM,KAAK,GAAG,OAAO,CAArB,KAAA;AACA,MAAM,OAAO,GAAI,QAAA,KAAA,MAAA,QAAA,IAA6B,KAAK,CAAnC,OAAC,IAA+C;AAAE,IAAA,OAAO,EAAE;AAAX,GAAhE;AACA,MAAM,OAAO,GAAG,OAAA,KAAA,KAAA,UAAA,IAA+B,iBAA/B,KAAA,GAAA,KAAA,GAAgE,KAAK,CAArF,OAAA;AAEA,MAAM,MAAM,GAAG,IAAI,GAAA,EAAA,GAEf,OAAO,CAAP,GAAA,GACE,QAAQ,CAAR,aAAA,CAAuB,OAAO,CADhC,GACE,CADF,GAFJ,MAAA;AAMA,MAAI,CAAJ,MAAA,EAAa;AAEb,EAAA,MAAM,CAAN,gBAAA,CAAA,QAAA,EAAA,OAAA,EAAA,OAAA;AAEA,EAAA,EAAE,CAAF,SAAA,GAAe;AACb,IAAA,OADa,EACb,OADa;AAEb,IAAA,OAFa,EAEb,OAFa;AAGb;AACA,IAAA,MAAM,EAAE,IAAI,GAAA,SAAA,GAAe;AAJd,GAAf;AAMD;;AAED,SAAA,MAAA,CAAA,EAAA,EAAgC;AAC9B,MAAI,CAAC,EAAE,CAAP,SAAA,EAAmB;AAEnB,sBAA0C,EAAE,CAA5C,SAAA;AAAA,MAAM,OAAN,iBAAM,OAAN;AAAA,MAAM,OAAN,iBAAM,OAAN;AAAA,2CAA0B,MAA1B;AAAA,MAA0B,MAA1B,qCAAmC,EAAnC;AAEA,EAAA,MAAM,CAAN,mBAAA,CAAA,QAAA,EAAA,OAAA,EAAA,OAAA;AACA,SAAO,EAAE,CAAT,SAAA;AACD;;AAED,OAAO,IAAM,MAAM,GAAG;AACpB,EAAA,QADoB,EACpB,QADoB;AAEpB,EAAA,MAAA,EAAA;AAFoB,CAAf;AAKP,eAAA,MAAA","sourcesContent":["import { VNodeDirective } from 'vue/types/vnode'\nimport { DirectiveOptions } from 'vue'\n\ninterface ScrollVNodeDirective extends Omit<VNodeDirective, 'modifiers'> {\n  value: EventListener | {\n    handler: EventListener\n    options?: boolean | AddEventListenerOptions\n  } | EventListenerObject & { options?: boolean | AddEventListenerOptions }\n  modifiers?: {\n    self?: boolean\n  }\n}\n\nfunction inserted (el: HTMLElement, binding: ScrollVNodeDirective) {\n  const { self = false } = binding.modifiers || {}\n  const value = binding.value\n  const options = (typeof value === 'object' && value.options) || { passive: true }\n  const handler = typeof value === 'function' || 'handleEvent' in value ? value : value.handler\n\n  const target = self\n    ? el\n    : binding.arg\n      ? document.querySelector(binding.arg)\n      : window\n\n  if (!target) return\n\n  target.addEventListener('scroll', handler, options)\n\n  el._onScroll = {\n    handler,\n    options,\n    // Don't reference self\n    target: self ? undefined : target,\n  }\n}\n\nfunction unbind (el: HTMLElement) {\n  if (!el._onScroll) return\n\n  const { handler, options, target = el } = el._onScroll\n\n  target.removeEventListener('scroll', handler, options)\n  delete el._onScroll\n}\n\nexport const Scroll = {\n  inserted,\n  unbind,\n} as DirectiveOptions\n\nexport default Scroll\n"],"sourceRoot":""}]}