{"remainingRequest":"/home/kevin/Code/solidity_projects/beraMarket/vapp/node_modules/babel-loader/lib/index.js!/home/kevin/Code/solidity_projects/beraMarket/vapp/node_modules/vuetify/lib/directives/click-outside/index.js","dependencies":[{"path":"/home/kevin/Code/solidity_projects/beraMarket/vapp/node_modules/vuetify/lib/directives/click-outside/index.js","mtime":1630154440786},{"path":"/home/kevin/Code/solidity_projects/beraMarket/vapp/node_modules/cache-loader/dist/cjs.js","mtime":1630154390989},{"path":"/home/kevin/Code/solidity_projects/beraMarket/vapp/node_modules/babel-loader/lib/index.js","mtime":1630154391115}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.some\";\nimport _typeof from \"/home/kevin/Code/solidity_projects/beraMarket/vapp/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport { attachedRoot } from \"../../util/dom\";\n\nfunction defaultConditional() {\n  return true;\n}\n\nfunction checkEvent(e, el, binding) {\n  // The include element callbacks below can be expensive\n  // so we should avoid calling them when we're not active.\n  // Explicitly check for false to allow fallback compatibility\n  // with non-toggleable components\n  if (!e || checkIsActive(e, binding) === false) return false; // If we're clicking inside the shadowroot, then the app root doesn't get the same\n  // level of introspection as to _what_ we're clicking. We want to check to see if\n  // our target is the shadowroot parent container, and if it is, ignore.\n\n  var root = attachedRoot(el);\n  if (root instanceof ShadowRoot && root.host === e.target) return false; // Check if additional elements were passed to be included in check\n  // (click must be outside all included elements, if any)\n\n  var elements = (_typeof(binding.value) === 'object' && binding.value.include || function () {\n    return [];\n  })(); // Add the root element for the component this directive was defined on\n\n\n  elements.push(el); // Check if it's a click outside our elements, and then if our callback returns true.\n  // Non-toggleable components should take action in their callback and return falsy.\n  // Toggleable can return true if it wants to deactivate.\n  // Note that, because we're in the capture phase, this callback will occur before\n  // the bubbling click event on any outside elements.\n\n  return !elements.some(function (el) {\n    return el.contains(e.target);\n  });\n}\n\nfunction checkIsActive(e, binding) {\n  var isActive = _typeof(binding.value) === 'object' && binding.value.closeConditional || defaultConditional;\n  return isActive(e);\n}\n\nfunction directive(e, el, binding) {\n  var handler = typeof binding.value === 'function' ? binding.value : binding.value.handler;\n  el._clickOutside.lastMousedownWasOutside && checkEvent(e, el, binding) && setTimeout(function () {\n    checkIsActive(e, binding) && handler && handler(e);\n  }, 0);\n}\n\nfunction handleShadow(el, callback) {\n  var root = attachedRoot(el);\n  callback(document.body);\n\n  if (root instanceof ShadowRoot) {\n    callback(root);\n  }\n}\n\nexport var ClickOutside = {\n  // [data-app] may not be found\n  // if using bind, inserted makes\n  // sure that the root element is\n  // available, iOS does not support\n  // clicks on body\n  inserted: function inserted(el, binding) {\n    var onClick = function onClick(e) {\n      return directive(e, el, binding);\n    };\n\n    var onMousedown = function onMousedown(e) {\n      el._clickOutside.lastMousedownWasOutside = checkEvent(e, el, binding);\n    };\n\n    handleShadow(el, function (app) {\n      app.addEventListener('click', onClick, true);\n      app.addEventListener('mousedown', onMousedown, true);\n    });\n    el._clickOutside = {\n      lastMousedownWasOutside: true,\n      onClick: onClick,\n      onMousedown: onMousedown\n    };\n  },\n  unbind: function unbind(el) {\n    if (!el._clickOutside) return;\n    handleShadow(el, function (app) {\n      if (!app || !el._clickOutside) return;\n      app.removeEventListener('click', el._clickOutside.onClick, true);\n      app.removeEventListener('mousedown', el._clickOutside.onMousedown, true);\n    });\n    delete el._clickOutside;\n  }\n};\nexport default ClickOutside;",{"version":3,"sources":["../../../src/directives/click-outside/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { attachedRoot } from '../../util/dom'\nimport { VNodeDirective } from 'vue/types/vnode'\n\ninterface ClickOutsideBindingArgs {\n  handler: (e: Event) => void\n  closeConditional?: (e: Event) => boolean\n  include?: () => HTMLElement[]\n}\n\ninterface ClickOutsideDirective extends VNodeDirective {\n  value?: ((e: Event) => void) | ClickOutsideBindingArgs\n}\n\nfunction defaultConditional () {\n  return true\n}\n\nfunction checkEvent (e: PointerEvent, el: HTMLElement, binding: ClickOutsideDirective): boolean {\n  // The include element callbacks below can be expensive\n  // so we should avoid calling them when we're not active.\n  // Explicitly check for false to allow fallback compatibility\n  // with non-toggleable components\n  if (!e || checkIsActive(e, binding) === false) return false\n\n  // If we're clicking inside the shadowroot, then the app root doesn't get the same\n  // level of introspection as to _what_ we're clicking. We want to check to see if\n  // our target is the shadowroot parent container, and if it is, ignore.\n  const root = attachedRoot(el)\n  if (root instanceof ShadowRoot && root.host === e.target) return false\n\n  // Check if additional elements were passed to be included in check\n  // (click must be outside all included elements, if any)\n  const elements = ((typeof binding.value === 'object' && binding.value.include) || (() => []))()\n  // Add the root element for the component this directive was defined on\n  elements.push(el)\n\n  // Check if it's a click outside our elements, and then if our callback returns true.\n  // Non-toggleable components should take action in their callback and return falsy.\n  // Toggleable can return true if it wants to deactivate.\n  // Note that, because we're in the capture phase, this callback will occur before\n  // the bubbling click event on any outside elements.\n  return !elements.some(el => el.contains(e.target as Node))\n}\n\nfunction checkIsActive (e: PointerEvent, binding: ClickOutsideDirective): boolean | void {\n  const isActive = (typeof binding.value === 'object' && binding.value.closeConditional) || defaultConditional\n\n  return isActive(e)\n}\n\nfunction directive (e: PointerEvent, el: HTMLElement, binding: ClickOutsideDirective) {\n  const handler = typeof binding.value === 'function' ? binding.value : binding.value!.handler\n\n  el._clickOutside!.lastMousedownWasOutside && checkEvent(e, el, binding) && setTimeout(() => {\n    checkIsActive(e, binding) && handler && handler(e)\n  }, 0)\n}\n\nfunction handleShadow (el: HTMLElement, callback: Function): void {\n  const root = attachedRoot(el)\n\n  callback(document.body)\n\n  if (root instanceof ShadowRoot) {\n    callback(root)\n  }\n}\n\nexport const ClickOutside = {\n  // [data-app] may not be found\n  // if using bind, inserted makes\n  // sure that the root element is\n  // available, iOS does not support\n  // clicks on body\n  inserted (el: HTMLElement, binding: ClickOutsideDirective) {\n    const onClick = (e: Event) => directive(e as PointerEvent, el, binding)\n    const onMousedown = (e: Event) => {\n      el._clickOutside!.lastMousedownWasOutside = checkEvent(e as PointerEvent, el, binding)\n    }\n\n    handleShadow(el, (app: HTMLElement) => {\n      app.addEventListener('click', onClick, true)\n      app.addEventListener('mousedown', onMousedown, true)\n    })\n\n    el._clickOutside = {\n      lastMousedownWasOutside: true,\n      onClick,\n      onMousedown,\n    }\n  },\n\n  unbind (el: HTMLElement) {\n    if (!el._clickOutside) return\n\n    handleShadow(el, (app: HTMLElement) => {\n      if (!app || !el._clickOutside) return\n      app.removeEventListener('click', el._clickOutside.onClick, true)\n      app.removeEventListener('mousedown', el._clickOutside.onMousedown, true)\n    })\n\n    delete el._clickOutside\n  },\n}\n\nexport default ClickOutside\n"],"sourceRoot":""}]}